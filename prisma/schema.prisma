// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  avatarUrl              String?
  displayName            String?
  username               String                  @unique
  email                  String                  @unique
  emailVerified          Boolean                 @default(false)
  password               String?
  role                   Role                    @default(USER)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime?               @updatedAt
  passwordResetToken     PasswordResetToken?
  emailVerificationToken EmailVerificationToken?
  session                Session[]
  github                 GitHubUser?
  google                 GoogleUser?
}

model GitHubUser {
  id       String @id @default(cuid())
  githubId Int    @unique
  userId   String @unique
  user     User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model GoogleUser {
  id       String @id @default(cuid())
  googleId String @unique
  userId   String @unique
  user     User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @unique
  email     String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}
